@using Dyn365FoCheatSheet.Components.Shared
@inherits LayoutComponentBase
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject IDialogService DialogService
@inject HistoryService History

<MudThemeProvider IsDarkMode="@IsDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Style="background-color:#1b1c1e !important;">
        <span style="color:wheat;" class="ml-2">DCB SAAS</span>
        <MudSpacer />
        <MudText Typo="Typo.subtitle2">Welcome</MudText>
        <MudText Class="ms-1" Style="color:wheat;" Typo="Typo.subtitle2"> @Role</MudText>
        <MudText Class="ms-1" Typo="Typo.subtitle2">@Name</MudText>
        <MudSpacer />

        <MudIconButton Icon="@Icons.Material.Filled.AttachMoney"
                       Style="color:wheat;"
                       Disabled="@(Role != "Administrator")"
                       OnClick="GoSalaryPage"
                       Edge="Edge.Start"
                       Class="ml-2" />
        <MudIconButton Icon="@Icons.Material.Filled.Brightness6"
                       Style="color:wheat;"
                       OnClick="ToggleTheme"
                       Edge="Edge.End" />

        <MudIconButton Icon="@Icons.Material.Filled.ArrowBack"
                       Style="color:wheat;"
                       OnClick="GoBack"
                       Edge="Edge.Start"
                       Class="ml-2" />

    </MudAppBar>
    <MudMainContent Class="main-content-spacing">
        <MudContainer Fixed="true">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@if (isLoading)
{
    <div class="loading-overlay">
        <MudProgressCircular Style="color:wheat;height:100px;width:100px;" Indeterminate="true">
            <ChildContent>Loading...</ChildContent>
        </MudProgressCircular>
        @* <MudProgressLinear Color="Color.Primary" Buffer="true" Value="@Value" BufferValue="@BufferValue" Class="my-7" /> *@
    </div>
}



@code {
    bool IsDarkMode = true;
    bool isLoading = false;
    public int Value { get; set; }
    public int BufferValue { get; set; }
    private string? Role;
    private string? Name;



    protected override void OnInitialized()
    {
        // Sayfa değişince loading otomatik kapanır
        Navigation.LocationChanged += (_, __) =>
        {
            isLoading = false;
            InvokeAsync(StateHasChanged);
        };
        var uri = new Uri(Navigation.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

        Role = query["role"];
        Name = query["name"];
    }

    void ToggleTheme()
    {
        IsDarkMode = !IsDarkMode;
    }

    async Task GoBack()
    {
        if (History.PreviousUri == "https://0.0.0.1/")
        {
            var parameters = new DialogParameters
            {
                { "ContentText", "Çıkışı onaylıyor musunuz?" },
                { "ContentTitle", "Çıkış" }
            };
            var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraExtraLarge };
            var dialog = await DialogService.ShowAsync<ConfirmDialog>("Çıkış Onayı", parameters, options);
            var result = await dialog.Result;

            if (result is { Canceled: false, Data: true })
            {
                Navigation.NavigateTo("/");
            }
            return;
        }

        await JS.InvokeVoidAsync("history.back");
    }

    void GoSalaryPage()
    {
        isLoading = true;
        StateHasChanged();

        Task.Run(async () =>
        {
            await Task.Delay(200); // overlay render için küçük gecikme
            Navigation.NavigateTo("/salary_page");
        });
    }
}
